// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Users {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefreshToken RefreshToken[]
  ContactList  ContactGroup[]

  @@map("users")
}

model RefreshToken {
  id        String @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  expire_in Int
  user      Users  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id   String @db.Uuid

  @@map("refresh_tokens")
}

model ContactGroup {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String
  description String
  user        Users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id     String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Contacts   Contacts[]
  Invitation Invitation[]

  @@map("contact_groups")
}

model Invitation {
  id               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email            String
  role             Role
  status           Status
  ContactGroup     ContactGroup @relation(fields: [contact_group_id], references: [id], onDelete: Cascade)
  contact_group_id String       @db.Uuid
  updatedAt        DateTime     @updatedAt

  @@map("invitations")
}

enum Role {
  READ_ONLY
  READ_WRITE
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Contacts {
  id               String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String
  address          String
  phone            String
  email            String
  ContactGroup     ContactGroup @relation(fields: [contact_group_id], references: [id], onDelete: Cascade)
  contact_group_id String       @db.Uuid
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  @@map("contacts")
}
